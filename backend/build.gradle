plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id 'jacoco'
}

jib {
	from {
		image = "openjdk:17-alpine"
	}
	to {
		image = "ohksj77/twtw-backend"
		tags = ["latest"]
	}
	container {
		jvmFlags = ["-Xms128m", "-Xmx128m"]
	}
}

group = 'com.twtw'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-reactor-netty'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.github.resilience4j:resilience4j-spring-boot2:2.2.0'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'

	implementation 'com.github.f4b6a3:ulid-creator:5.2.3'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'org.springframework.cloud:spring-cloud-gcp-starter:1.2.5.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-gcp-storage:1.2.5.RELEASE'
	implementation 'com.google.firebase:firebase-admin:6.8.1'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testRuntimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "org.testcontainers:junit-jupiter:1.19.7"
	testImplementation "org.testcontainers:junit-jupiter:1.19.7"
	testImplementation "com.redis:testcontainers-redis:2.0.1"
	testImplementation "org.testcontainers:rabbitmq:1.19.7"
	testImplementation "org.testcontainers:mysql:1.17.2"
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5")
	into 'static/docs'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()

	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = "0.8.7"
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = true
		csv.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ["com/twtw/backend/BackendApplication.class",
										"com/twtw/backend/config/**",
										"com/twtw/backend/global/**",
										"com/twtw/backend/aspect/**",
										"com/twtw/backend/domain/**/exception/**",
										"com/twtw/backend/domain/**/controller/advice/**",
										"com/twtw/backend/domain/**/dto/**"])
		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
		}
	}
}


tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
	main.java.srcDirs += [ generated ]
}

clean {
	delete file(generated)
}
